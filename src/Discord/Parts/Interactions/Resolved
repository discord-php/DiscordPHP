<?php

declare(strict_types=1);

/*
 * This file is a part of the DiscordPHP project.
 *
 * Copyright (c) 2015-present David Cole <david.cole1340@gmail.com>
 *
 * This file is subject to the MIT license that is bundled
 * with this source code in the LICENSE.md file.
 */

namespace Discord\Parts\Interactions;

use Discord\Parts\Part;
use Discord\Parts\User\User;
use Discord\Parts\User\Member;
use Discord\Parts\Guild\Role;
use Discord\Parts\Channel\Channel;
use Discord\Parts\Channel\Message;
use Discord\Parts\Channel\Attachment;

/**
 * Represents resolved data for select menus and interactions.
 *
 * @link https://discord.com/developers/docs/interactions/receiving-and-responding#resolved-data-structure
 *
 * @property array<string, User>       $users        Map of Snowflakes to user objects.
 * @property array<string, Member>     $members      Map of Snowflakes to partial member objects.
 * @property array<string, Role>       $roles        Map of Snowflakes to role objects.
 * @property array<string, Channel>    $channels     Map of Snowflakes to partial channel objects.
 * @property array<string, Message>    $messages     Map of Snowflakes to partial message objects.
 * @property array<string, Attachment> $attachments  Map of Snowflakes to attachment objects.
 */
class Resolved extends Part
{
    /**
     * {@inheritDoc}
     */
    protected $fillable = [
        'users',
        'members',
        'roles',
        'channels',
        'messages',
        'attachments',
    ];

    /**
     * @return array<string, User>
     */
    protected function getUsersAttribute(): array
    {
        $users = [];
        foreach ($this->attributes['users'] ?? [] as $id => $user) {
            $users[$id] = $this->factory->part(User::class, (array) $user, true);
        }
        return $users;
    }

    /**
     * @return array<string, Member>
     */
    protected function getMembersAttribute(): array
    {
        $members = [];
        foreach ($this->attributes['members'] ?? [] as $id => $member) {
            $members[$id] = $this->factory->part(Member::class, (array) $member + ['id' => $id], true);
        }
        return $members;
    }

    /**
     * @return array<string, Role>
     */
    protected function getRolesAttribute(): array
    {
        $roles = [];
        foreach ($this->attributes['roles'] ?? [] as $id => $role) {
            $roles[$id] = $this->factory->part(Role::class, (array) $role, true);
        }
        return $roles;
    }

    /**
     * @return array<string, Channel>
     */
    protected function getChannelsAttribute(): array
    {
        $channels = [];
        foreach ($this->attributes['channels'] ?? [] as $id => $channel) {
            $channels[$id] = $this->factory->part(Channel::class, (array) $channel, true);
        }
        return $channels;
    }

    /**
     * @return array<string, Message>
     */
    protected function getMessagesAttribute(): array
    {
        $messages = [];
        foreach ($this->attributes['messages'] ?? [] as $id => $message) {
            $messages[$id] = $this->factory->part(Message::class, (array) $message, true);
        }
        return $messages;
    }

    /**
     * @return array<string, Attachment>
     */
    protected function getAttachmentsAttribute(): array
    {
        $attachments = [];
        foreach ($this->attributes['attachments'] ?? [] as $id => $attachment) {
            $attachments[$id] = $this->factory->part(Attachment::class, (array) $attachment, true);
        }
        return $attachments;
    }
}
